name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.date.outputs.date }}
    steps:
    - uses: actions/checkout@v2

    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%H%M%m%d%Y')"

    - name: Wait for tests to succeed
      uses: lewagon/wait-on-check-action@master
      with:
        ref: staging
        running-workflow-name: 'Build and Test Docker Image'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      id: target-buildx
      uses: docker/setup-buildx-action@master

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.target-buildx-cache
        key: ${{ runner.os }}-target-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-target-buildx

    - name: Build production image
      uses: docker/build-push-action@v2
      with:
        context: .
        builder: ${{ steps.target-buildx.outputs.name }}
        file: Dockerfile
        tags: ${{secrets.AWS_ECR}}/academic:${{ steps.date.outputs.date }},${{secrets.AWS_ECR}}/academic:staging
        build-args: |
          RUBY_VERSION=2.7.3
          NODE_MAJOR=14
          PG_MAJOR=12
          BUNDLER_VERSION=2.1.4
  #        CDN_URL=${{secrets.STAGING_CDN_URL}}/${{ steps.date.outputs.date }}
        target: production
        cache-from: type=local,src=/tmp/.target-buildx-cache
        cache-to: type=local,dest=/tmp/.target-buildx-cache-new
        outputs: type=docker,dest=/tmp/docker-image.tar

    - name: Push image to Amazon ECR
      run: |
        docker load --input /tmp/docker-image.tar
        docker push ${{secrets.AWS_ECR}}/uk-tracker --all-tags

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: docker-image
        path: /tmp/docker-image.tar

    - name: Move cache
      run: |
        rm -rf /tmp/.target-buildx-cache
        mv /tmp/.target-buildx-cache-new /tmp/.target-buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Download built docker image
      uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: /tmp

    - name: Load image
      run: |
        docker load --input /tmp/docker-image.tar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

   # - name: Upload Assets to s3 Bucket
   #   run: |
   #     id=$(docker run -it --rm --detach ${{secrets.AWS_ECR}}/uk-tracker:${{ needs.build-image.outputs.date }})
   #     mkdir -p tmp_assets
   #     docker cp $id:/home/rails/app/public/packs-production tmp_assets/
   #     aws s3 cp --recursive tmp_assets/ s3://${{ secrets.STAGING_BUCKET_NAME }}/${{ needs.build-image.outputs.date }}/

   # - name: Create Cloudfront Distribution
   #   run: |
   #     ./cloudfront.sh ${{ needs.build-image.outputs.date }} ${{ secrets.STAGING_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com ${{ secrets.STAGING_DISTRIBUTION_ID }}

    # - name: install kubectl
    #  uses: actions-hub/kubectl@master

    - name: Deploy Amazon EKS
      env:
        CLUSTER_NAME: Staging-eks-cluster
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }}

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.7.1

    - name: deploy app with helm
      run:
        helm install academic-tracker /home/runner/academic-actions/academic-action/chart
